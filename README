
andrew.diver@yahoo.co.uk
22/06/2015

An ATmega328P microcontroller project to handle infrared detection and control of a Samsung TV (used as
a monitor) for an HTPC. Based on the ir_dedecoder project which can decode incoming IR pulses in NEC/Samsung/RC6 encoding.
The app is specific to using a Microsoft Media Center Edition remote (RC6 protocol) and targets a Samsung TV as monitor.
The project is specific to my home HTPC setup where I use a Microsoft Media Center IR remote to control lirc (and hence kodi).

See ir_controller.c  for ATmega328P pin diagram.

I wanted to be able to:

1.  Have the PC startup by pressing the MCE remote's POWER key.  (Requires using the ATX psu's standby power
line for the ATmega328P). This is done using an NPN transistor to switch a pin on the motherboard to ground
for a few hundred ms (which is how the manual power button works).

2.  On startup, detect the On/Off state of the monitor - which is actually an 'HD-ready' Samsung TV
and turn it on (if it's off) by sending the IR code for the Samsung POWER key by modulating an IR
transmitter LED.

3.  Send the IR codes to lircd running on the HTPC via the USART header on the motherboard.
This is done as per Paul Fox's avrlirc project: 
    https://github.com/foxharp/avrlirc
which has a daemon read the USART serial line and 
re-broadcast the data via UDP for the lircd udp driver. A slightly modified version of his 
avrlirc2udp  serial -> lirc daemon is used here. It was modified to allow longer (>15bit) pulse/space 
lengths to be sent via serial -> lirc.

4.  On shutdown of the HTPC, automatically power off the Samsung TV by sending the NEC/Samsung IR POWER code.

5.  Have a 'tv mode' by pressing the LIVETV button on the MCE remote which will then allow further MCE 
remote button presses to be translated and re-transmitted by the IR LED to the Samsung TV/monitor.
This would be used occasionally for adjustment of the TV settings )master volume, contrast etc) without needing
to dig out the TV's remote control.
This also allows the TV to be switched off leaving the HTPC on. In 'tv mode', the MCE scancodes are not sent
via serial and so will only be interpreted by the TV. Only a chosen subset of the Samsung's remote
buttons were implemented, as I will never use the TV functionality. Pressing LIVETV again will toggle 
the mode back to lirc.

The microcontroller IR detector outputs the scancodes to USART serial line re-encoded as pulse/space 
lengths in a format that the lirc udp driver can read (lengths as 16-bit low-endian shorts).
The MSbit flag is used to mark spaces. The USART connection uses 19.2 kbaud or 38.4kbaud 8N1.

This is designed for an ATmega328P. It uses the 16bit TIMER1 to measure the IR pulse/space intervals using 
Input Capture interrupts.
Connect the IR detector eg Vishay TSOP4838 or similar  to ICP1 pin. The IR detector should be inverting ie
Vdetector = 3V3 (high) when no button pressed. It should go low when an IR pulse is received.

8bit TIMER2 is used to control timing to send IR signals (IR blasting) to an IR LED transmitter - designed
to send Samsung TV remote signals eg to turn the TV/monitor on when the HTPC is booted.

8bit TIMER0 is used to control timing to red LED to give visual feedback - rapidly flickering when
IR pulses are detected. In 'TV mode', the LED is on to show that the TV is the target of IR codes.
Since the TV key on the MCE remote is used to toggle the mode, it is useful to have a reminder of
the current state!

A GPIO output is used to turn the PC on/off by sending a +ve pulse to an NPN transistor to
switch the PWR switch pin on the PC motherboard to ground for a few hundred ms.

A GPIO output is used to send pulses to the IR transmitter LED via an NPN transistor amp
to IR blast the Samsung TV/monitor. The LED is the collector load from 3V3 and a 10R resistor
used from emitter to GND.

A GPIO input detects the PC POWER on/off state by simply reading the voltage on the ATX psu's
3V3 line - which is 0 when PC is off.

A GPIO input detects the TV on/off state by receiving an IR signal from a custom USB-powered circuit
plugged in to the Samsung TV  - see doc/irhb_10kHz.pdf
This circuit transmits an IR pulse approximately every 5s providing an IR heartbeat when the TV is on.
An IR detector on the HTPC detects this and a monostable holds its outputs a logic1 or 0 level
to an input GPIO line.
The modulation for the TV's IR heartbeat was set at approx 10kHz to try to avoid
interfering with the 38kHz modulation frequency used by the MCE remote and the Samsung remote.
See doc/irhb_10kHz_detector.pdf
 
Tested with 16MHz crystal clock for ATmega328P - works with 38400baud, not v. reliable at 57600.
Tested with 8MHz internal RC oscillator - works if baudrate dropped to 19200.
May also work with F_CPU at 8MHz using the internal RC oscillator (NB untested as yet!)

The  avrlirc2upd  daemon has to be run on the lircd host to read from the serial port and output
the data as UDP packets. 
I have modified avrlirc2udp.c  to support the lirc 'extended time' format where a length of
0x0000 (short) followed by a 4-byte little-endian int can be used to send longer time intervals
which allows a resolution of 1us to be used for the lirc udp timings.

#  To build the AVR code and flash it:
make all
make install

#  To compile avrlirc2udp
gcc -O2 avrlirc2udp.c -o avrlirc2udp

To run:
/usr/local/bin/avrlirc2udp -t /dev/ttyS0 -h localhost -p 9012

To run lircd:
/usr/sbin/lircd -H udp -d 9012 --driver-option=clocktick:1


#  NB  lircd  interprets the bits the opposite way round from my decoding so
#  it will give the 2s complement.
#  eg  ir_controller  reads  KEY_OK as scan=0x800f8422
#  whereas lircd using udp:  KEY_OK    scan=0x0ff07bdd
#  Maybe this is a result of the inverting nature of the IR detector(?) 
#  
Working RC6 capture from MCE remote:  RC6 scan=0x800f8422  (KEY_OK)
2696 868 448 456 416 424 448 872 444 860 1336 
904 412 432 448 432 448 432 448 432 448 432 444 428 448 464 412 
432 448 464 416 432 892 428 448 456 416 424 448 424 448 872 444 
428 444 464 412 428 892 872 448 432 448 432 448 432 892 908 412 
436 444 428 888 872 448 452100 2692 ...
#  intervals are in 1us units.
